paths: 
  /api/products:
    get:
      summary: Get All Products
      tags:
        - Products
      responses:
        "200":
          description: Products were retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/product'
        "500":
          description: Server error. Usually trying to generate query or connection failure to DB
    post:
      summary: Add a product given a request body
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#components/requestBodies/updateproduct'
  /api/products/{pid}:
    get:
      summary: Get a product
      tags:
        - Products
      parameters:
        - name: uid
          in: path
          required: true
          description: ID from product being requested
          schema:
            $type: String
      responses:
        "200":
          description: product found
          content: 
            application/json:
              schema:
                $ref: '#components/schemas/product'
    put:
      summary: Update a product given an ID
      tags:
        - Products
      parameters:
      - name: uid
        in: path
        required: true
        description: ID from product being requested
        schema:
          $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#components/requestBodies/updateproduct'
    delete:
      summary: Delete a product
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: ID from product being deleted
          schema:
            $type: String
      responses:
        "200":
          description: product deleted
          content: 
            application/json:
              schema:
                $ref: '#components/schemas/product'
components: 
  schemas: 
    product: 
      type: object
      properties:
        _id: 
          type: ObjectId
          description: ID auto generated by mongo
        marca: 
          type: String
          description: Brand of the product
        modelo: 
          type: String
          description: model of the product
        tipo: 
          type: String
          description: type of electric vehicle
        rango: 
          type: Number
          description: range in miles
        precio: 
          type: Number
          description: Current Product Price
        topFeature1: 
          type: String
          description: main feature of product
        topFeature2:
          type: String
          description: main feature of product
        topFeature3: 
          type: String
          description: main feature of product
        imageName: 
          type: String
          description: image file name of the product
        liked:
          type: String
          description: Liked Y/N
        onCart: 
          type: String
          description: on Cart Y/N
        __v: 
          type: String
          description: Document version
        stock: 
          type: String
          description: main feature of product
        id: 
          type: String
          description: application id
      example:
        _id: ObjectId("641e3059fc08bcffaf3f7eea")
        marca: meepo
        modelo: Street Scooter
        tipo: scooter
        rango: 30
        precio: 100
        topFeature1: 
        topFeature2: asdads
        topFeature3: asdasd
        imageName: meepo3.png
        liked: Y
        onCart: 10
        __v: 0
        stock: 20
        id: 641de52bbc060167a460e6c9  
  requestBodies:  
    updateproduct:
      type: object
      properties:
        marca: 
          type: String
          description: Brand of the product
        modelo: 
          type: String
          description: model of the product
        tipo: 
          type: String
          description: type of electric vehicle
        rango: 
          type: Number
          description: range in miles
        precio: 
          type: Number
          description: Current Product Price
        topFeature1: 
          type: String
          description: main feature of product
        topFeature2:
          type: String
          description: main feature of product
        topFeature3: 
          type: String
          description: main feature of product
        imageName: 
          type: String
          description: image file name of the product
        liked:
          type: String
          description: Liked Y/N
        onCart: 
          type: String
          description: on Cart Y/N
        __v: 
          type: String
          description: Document version
        stock: 
          type: String
          description: main feature of product
        id:
          type: String
          description: application id
      example:
        marca: meepo
        modelo: Street Scooter
        tipo: scooter
        rango: 30
        precio: 100
        topFeature1: 
        topFeature2: asdads
        topFeature3: asdasd
        imageName: meepo3.png
        liked: Y
        onCart: 10
        __v: 0
        stock: 20
        id: 641de52bbc060167a460e6c9 
       
      
  