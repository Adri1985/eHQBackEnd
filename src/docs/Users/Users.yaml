paths: 
  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        "200":
          description: Users were retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/User'
        "500":
          description: Server error. Usually trying to generate query or connection failure to DB
    post:
      summary: Add a user a user given request body
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#components/requestBodies/updateUser'
  /api/users/{uid}:
    get:
      summary: Get a user
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID from user being requested
          schema:
            $type: String
      responses:
        "200":
          description: User found
          content: 
            application/json:
              schema:
                $ref: '#components/schemas/User'
    put:
      summary: Update a user given an ID
      tags:
        - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: ID from user being requested
        schema:
          $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#components/requestBodies/updateUser'
    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID from user being deleted
          schema:
            $type: String
      responses:
        "200":
          description: User deleted
          content: 
            application/json:
              schema:
                $ref: '#components/schemas/User'
components: 
  schemas: 
    User: 
      type: object
      properties:
        _id: 
          type: ObjectId
          description: ID auto generated by mongo
        first_name:
          type: String
          description: First Name
        last_name:
          type: String
          description: Last Name
        email:
          type: String
          description: User's Email
        password:
          type: String
          description: Hashed user password
      example:
        _id: ObjectId("641e3059fc08bcffaf3f7eea")
        first_name: Adrian
        last_name: Campo
        email: adrian@gmail.com
        password: $2b$10$kr4nWNGuaMDAT/8UE1Yjuu5Z1n0VMMMMECAgyU9.MwNoZH7Ys3Y5K   
  requestBodies:  
    updateUser:
      type: object
      properties:
        first_name:
          type: String
          description: First Name
        last_name:
          type: String
          description: Last Name
        email:
          type: String
          description: User's Email
        password:
          type: String
          description: Hashed user password
      example:
        first_name: Adrian
        last_name: Campo
        email: adrian@gmail.com
        password: $2b$10$kr4nWNGuaMDAT/8UE1Yjuu5Z1n0VMMMMECAgyU9.MwNoZH7Ys3Y5K     
